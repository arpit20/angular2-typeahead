var invariant = require('invariant');
var querystring_1 = require('querystring');
var pick = require('object-pick');
var fs_1 = require('../utils/fs');
var REGISTRY_URL = 'https://api.typings.org';
exports.VALID_SOURCES = {
    dt: 'DefinitelyTyped',
    npm: 'NPM',
    github: 'GitHub',
    bower: 'Bower',
    ambient: 'Ambient',
    common: 'Common'
};
function search(options) {
    if (options.source) {
        invariantSource(options.source);
    }
    var query = querystring_1.stringify(pick(options, ['query', 'name', 'source', 'offset', 'limit']));
    return fs_1.readJsonFrom(REGISTRY_URL + "/search?" + query);
}
exports.search = search;
function getVersions(source, name, version) {
    invariantSource(source);
    var sourceParam = encodeURIComponent(source);
    var nameParam = encodeURIComponent(name);
    if (version == null) {
        return fs_1.readJsonFrom(REGISTRY_URL + "/versions/" + sourceParam + "/" + nameParam);
    }
    return fs_1.readJsonFrom(REGISTRY_URL + "/versions/" + sourceParam + "/" + nameParam + "/" + encodeURIComponent(version));
}
exports.getVersions = getVersions;
function isRegistryPath(path) {
    return path.indexOf(':') === -1;
}
exports.isRegistryPath = isRegistryPath;
function parseRegistryPath(dep) {
    var _a = dep.split('@'), name = _a[0], version = _a[1];
    return { name: name, version: version };
}
exports.parseRegistryPath = parseRegistryPath;
function invariantSource(source) {
    invariant(exports.VALID_SOURCES.hasOwnProperty(source), 'Invalid source: %s', source);
}
//# sourceMappingURL=registry.js.map